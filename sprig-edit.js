/*
@title: Sprig-Edit
@author: Colack
@tags: ['utility']
@img: ""
@addedOn: 2024-04-30

This is a simple text editor for Sprig.

Controls:
JL - Change Letter
S - Space and Start
I - Place
K - Delete
*/

/*
  Sprig-Edit
  By Jack Spencer (Colack)

  Sprig-Edit is a basic text editor for the Sprig that I've created. It was originally written in C++, then translated over to JS for this project.
  Sprig-Edit contains 40 characters: A-Z, !?.- and 0-9. It is controlled with all the buttons, and is a pretty robust text editor that will be
  updated for the forseeable future. 

  There is documentation in the code for what each bit of code does.

  Thanks,
  - Colack
*/

// Tunes for the Game
const MUSIC_main = tune`
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038,
97.71986970684038: C4-97.71986970684038,
97.71986970684038: E4-97.71986970684038 + E5/97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038: E4-97.71986970684038 + E5/97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038: C4-97.71986970684038 + C5/97.71986970684038,
97.71986970684038: G4-97.71986970684038 + G5/97.71986970684038,
97.71986970684038,
97.71986970684038: G4-97.71986970684038 + G5/97.71986970684038,
97.71986970684038,
97.71986970684038: B4-97.71986970684038 + B5/97.71986970684038,
97.71986970684038,
97.71986970684038: G4-97.71986970684038 + G5/97.71986970684038,
97.71986970684038,
97.71986970684038: B4-97.71986970684038 + B5/97.71986970684038,
97.71986970684038: A4-97.71986970684038 + A5/97.71986970684038,
97.71986970684038: G4-97.71986970684038 + G5/97.71986970684038,
97.71986970684038: F4-97.71986970684038 + F5/97.71986970684038,
97.71986970684038: E4-97.71986970684038 + E5/97.71986970684038,
97.71986970684038: D4-97.71986970684038 + D5/97.71986970684038`;
const MUSIC_controls = tune`
138.88888888888889: C4/138.88888888888889 + C5^138.88888888888889,
138.88888888888889,
138.88888888888889: C4/138.88888888888889 + C5^138.88888888888889,
138.88888888888889: D4/138.88888888888889 + D5^138.88888888888889,
138.88888888888889: G4/138.88888888888889 + G5^138.88888888888889,
138.88888888888889,
138.88888888888889: G4/138.88888888888889 + G5^138.88888888888889,
138.88888888888889: B4/138.88888888888889 + B5^138.88888888888889,
138.88888888888889: G4/138.88888888888889 + G5^138.88888888888889,
138.88888888888889: D4/138.88888888888889 + D5^138.88888888888889,
138.88888888888889: D4/138.88888888888889 + D5^138.88888888888889,
138.88888888888889: G4/138.88888888888889 + G5^138.88888888888889,
138.88888888888889,
138.88888888888889: G4/138.88888888888889 + G5^138.88888888888889,
138.88888888888889: C5^138.88888888888889 + C4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889,
138.88888888888889: C5^138.88888888888889 + C4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889,
138.88888888888889: G5^138.88888888888889 + G4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889,
138.88888888888889: G5^138.88888888888889 + G4/138.88888888888889,
138.88888888888889: G5^138.88888888888889 + G4/138.88888888888889,
138.88888888888889: B5^138.88888888888889 + B4/138.88888888888889,
138.88888888888889: G5^138.88888888888889 + G4/138.88888888888889,
138.88888888888889: B5^138.88888888888889 + B4/138.88888888888889,
138.88888888888889: G5^138.88888888888889 + G4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889,
138.88888888888889: C5^138.88888888888889 + C4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889,
138.88888888888889: G5^138.88888888888889 + G4/138.88888888888889,
138.88888888888889: E5^138.88888888888889 + E4/138.88888888888889`;

// Sound Effects
const SFX_start = tune`
500: C4-500,
15500`;
const SFX_edit = tune`
103.44827586206897: C4-103.44827586206897,
103.44827586206897: C4-103.44827586206897,
103.44827586206897: C4-103.44827586206897,
3000`;

// Playback variables.
const PLAYBACK_MAIN = playTune(MUSIC_main, Infinity);
var PLAYBACK_CONTROLS;
var PLAYBACK_EDITOR;

// Title Screen Level
var LEVEL_TITLE = map``;

// Text Variables
const TEXT_A = "A";
const TEXT_B = "B";
const TEXT_C = "C";
const TEXT_D = "D";
const TEXT_E = "E";
const TEXT_F = "F";
const TEXT_G = "G";
const TEXT_H = "H";
const TEXT_I = "I";
const TEXT_J = "J";
const TEXT_K = "K";
const TEXT_L = "L";
const TEXT_M = "M";
const TEXT_N = "N";
const TEXT_O = "O";
const TEXT_P = "P";
const TEXT_Q = "Q";
const TEXT_R = "R";
const TEXT_S = "S";
const TEXT_T = "T";
const TEXT_U = "U";
const TEXT_V = "V";
const TEXT_W = "W";
const TEXT_X = "X";
const TEXT_Y = "Y";
const TEXT_Z = "Z";

// Symbol Variables
const TEXT_EX = "!";
const TEXT_QU = "?";
const TEXT_PE = "[";
const TEXT_DA = "-";

// Number Variables
const NUM_0 = "0";
const NUM_1 = "1";
const NUM_2 = "2";
const NUM_3 = "3";
const NUM_4 = "4";
const NUM_5 = "5";
const NUM_6 = "6";
const NUM_7 = "7";
const NUM_8 = "8";
const NUM_9 = "9";

// Logo Variables
const LOGO_1 = "(";
const LOGO_2 = ")";
const LOGO_3 = "*";
const LOGO_4 = "&";

const SYSTEM_CLEAR = "%";
const BACKGROUND_BLACK = "^";

const player = "#";             // Player Variable

var TEXT_LEGEND = map`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
CHARACTER.---.A.`;     // This map stores the data for where each piece of text is.
var isUppercase = false;        // Change this to true to have the current character be uppercase.
var isHidden = false;           // Variable to make the press down to start blink
var currentCharacter = "A";      // Current Character Held.
var newInterval;
var currentLine = 0;
var currentSelectedCharacter = 0;

const VERSION_MAJOR = "0";
const VERSION_MINOR = "0";
const VERSION_PATCH = "5";

setLegend(
  [ player, bitmap`
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............` ],    // Player text selector position

  [ TEXT_A, bitmap`
................
................
................
......2222......
......2222......
....22....22....
....22....22....
....22222222....
....22222222....
....22....22....
....22....22....
....22....22....
....22....22....
................
................
................`],     // A
  [ TEXT_B, bitmap`
................
................
................
................
....222222......
....222222......
....22....22....
....22....22....
....222222......
....222222......
....22....22....
....22....22....
....222222......
....222222......
................
................`],     // B
  [ TEXT_C, bitmap`
................
................
................
................
......222222....
......222222....
....22..........
....22..........
....22..........
....22..........
....22..........
....22..........
......222222....
......222222....
................
................`],     // C
  [ TEXT_D, bitmap`
................
................
................
................
....222222......
....222222......
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....222222......
....222222......
................
................`],     // D
  [ TEXT_E, bitmap`
................
................
................
................
....22222222....
....22222222....
....22..........
....22..........
....222222......
....222222......
....22..........
....22..........
....22222222....
....22222222....
................
................`],     // E
  [ TEXT_F, bitmap`
................
................
................
................
....22222222....
....22222222....
....22..........
....22..........
....222222......
....222222......
....22..........
....22..........
....22..........
....22..........
................
................`],     // F
  [ TEXT_G, bitmap`
................
................
................
................
......222222....
......222222....
....22..........
....22..........
....22..2222....
....22..2222....
....22....22....
....22....22....
......222222....
......222222....
................
................`],     // G
  [ TEXT_H, bitmap`
................
................
................
................
....22....22....
....22....22....
....22....22....
....22....22....
....22222222....
....22222222....
....22....22....
....22....22....
....22....22....
....22....22....
................
................`],     // H
  [ TEXT_I, bitmap`
................
................
................
................
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
................
................`],     // I
  [ TEXT_J, bitmap`
................
................
..........22....
..........22....
..........22....
..........22....
..........22....
..........22....
..........22....
..........22....
....22....22....
....22....22....
......2222......
......2222......
................
................`],     // J
  [ TEXT_K, bitmap`
................
................
................
................
....22....22....
....22....22....
....22..22......
....22..22......
....2222........
....2222........
....22..22......
....22..22......
....22....22....
....22....22....
................
................`],     // K
  [ TEXT_L, bitmap`
................
................
................
................
....22..........
....22..........
....22..........
....22..........
....22..........
....22..........
....22..........
....22..........
....222222......
....222222......
................
................`],     // L
  [ TEXT_M, bitmap`
................
................
................
................
...22......22...
...22......22...
...2222..2222...
...2222..2222...
...22..22..22...
...22..22..22...
...22......22...
...22......22...
...22......22...
...22......22...
................
................`],     // M
  [ TEXT_N, bitmap`
................
................
................
................
....22....22....
....22....22....
....2222..22....
....2222..22....
....22..2222....
....22..2222....
....22....22....
....22....22....
....22....22....
....22....22....
................
................`],     // N
  [ TEXT_O, bitmap`
................
................
................
................
......2222......
......2222......
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
......2222......
......2222......
................
................`],     // O
  [ TEXT_P, bitmap`
................
................
................
................
....222222......
....222222......
....22....22....
....22....22....
....222222......
....222222......
....22..........
....22..........
....22..........
....22..........
................
................`],     // P
  [ TEXT_Q, bitmap`
................
................
................
................
......2222......
......2222......
....22....22....
....22....22....
....22....22....
....22....22....
....22..2222....
....22..2222....
......222222....
......222222....
................
................`],     // Q
  [ TEXT_R, bitmap`
................
................
................
................
....222222......
....222222......
....22....22....
....22....22....
....222222......
....222222......
....22..22......
....22..22......
....22....22....
....22....22....
................
................`],     // R
  [ TEXT_S, bitmap`
................
................
................
................
......222222....
......222222....
....22..........
....22..........
......2222......
......2222......
..........22....
..........22....
....222222......
....222222......
................
................`],     // S
  [ TEXT_T, bitmap`
................
................
................
................
.....222222.....
.....222222.....
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
................
................`],     // T
  [ TEXT_U, bitmap`
................
................
................
................
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....22....22....
....22222222....
....22222222....
................
................`],     // U
  [ TEXT_V, bitmap`
................
................
................
................
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.......22.......
.......22.......
................
................`],     // V
  [ TEXT_W, bitmap`
................
................
................
................
...22......22...
...22......22...
...22......22...
...22......22...
...22......22...
...22......22...
...22..22..22...
...22..22..22...
.....22..22.....
.....22..22.....
................
................`],     // W
  [ TEXT_X, bitmap`
................
................
................
................
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.......22.......
.......22.......
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
................
................`],     // X
  [ TEXT_Y, bitmap`
................
................
................
................
.....22..22.....
.....22..22.....
.....22..22.....
.....22..22.....
.....222222.....
.....222222.....
.......22.......
.......22.......
.......22.......
.......22.......
................
................`],     // Y
  [ TEXT_Z, bitmap`
................
................
................
................
....22222222....
....22222222....
..........22....
..........22....
........22......
........22......
......22........
......22........
....22222222....
....22222222....
................
................`],     // Z
  
  [ TEXT_EX, bitmap`
................
................
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
................
................
.......22.......
.......22.......
................
................`],    // !
  [ TEXT_QU, bitmap`
................
................
................
................
....2222........
....2222........
........22......
........22......
....2222........
....2222........
................
................
....22..........
....22..........
................
................`],    // ?
  [ TEXT_PE, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
..22............
..22............
................
................`],    // .
  [ TEXT_DA, bitmap`
................
................
................
................
................
................
................
...2222222222...
...2222222222...
................
................
................
................
................
................
................`],    // -

  [ NUM_0, bitmap`
................
................
................
................
.....222222.....
.....222222.....
...22....2222...
...22....2222...
...22..22..22...
...22..22..22...
...2222....22...
...2222....22...
.....222222.....
.....222222.....
................
................`],      // 0
  [ NUM_1, bitmap`
................
................
.......22.......
.......22.......
.....2222.......
.....2222.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
.......22.......
...2222222222...
...2222222222...
................
................`],      // 1
  [ NUM_2, bitmap`
................
................
................
................
...22222222.....
...22222222.....
...........22...
...........22...
.....222222.....
.....222222.....
...22...........
...22...........
...2222222222...
...2222222222...
................
................`],      // 2
  [ NUM_3, bitmap`
................
................
................
................
.....222222.....
.....222222.....
...22......22...
...22......22...
.......2222.....
.......2222.....
...22......22...
...22......22...
.....222222.....
.....222222.....
................
................`],      // 3
  [ NUM_4, bitmap`
................
................
................
................
.......2222.....
.......2222.....
.....22..22.....
.....22..22.....
...22....22.....
...22....22.....
...2222222222...
...2222222222...
.........22.....
.........22.....
................
................`],      // 4
  [ NUM_5, bitmap`
................
................
................
................
...2222222222...
...2222222222...
...22...........
...22...........
...22222222.....
...22222222.....
...........22...
...........22...
...22222222.....
...22222222.....
................
................`],      // 5
  [ NUM_6, bitmap`
................
................
................
................
.....22222222...
.....22222222...
...22...........
...22...........
...22222222.....
...22222222.....
...22......22...
...22......22...
.....222222.....
.....222222.....
................
................`],      // 6
  [ NUM_7, bitmap`
................
................
................
................
...2222222222...
...2222222222...
...........22...
...........22...
.........22.....
.........22.....
.......22.......
.......22.......
.......22.......
.......22.......
................
................`],      // 7
  [ NUM_8, bitmap`
................
................
................
................
.....222222.....
.....222222.....
...22......22...
...22......22...
.....222222.....
.....222222.....
...22......22...
...22......22...
.....222222.....
.....222222.....
................
................`],      // 8
  [ NUM_9, bitmap`
................
................
................
................
.....222222.....
.....222222.....
...22......22...
...22......22...
.....22222222...
.....22222222...
...........22...
...........22...
.....222222.....
.....222222.....
................
................`],      // 9

  [ BACKGROUND_BLACK, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [ SYSTEM_CLEAR, bitmap``],

  [ LOGO_1, bitmap`
................
................
................
.........222....
........20022...
........200022..
........20000222
........20200020
........20220000
........20220000
........20000000
........22000000
........22002000
........20020000
........20200700
........20202000`],
  [ LOGO_2, bitmap`
................
........2222....
........20022...
......2220002...
......22000022..
......220002022.
222222200002202.
000000000002202.
000000000002202.
0000000000000022
0000000000000002
0000002220000002
0000002007000002
0000022077700002
0000022020070002
0000022070070002`],
  [ LOGO_3, bitmap`
........20207000
........20207000
........20207000
........20207700
........20207700
........20000000
.........2088800
..........200222
.......222222000
.......200000220
.......202220000
.......200222200
.......220222000
........22022000
........22002000
.........2200000`],
  [ LOGO_4, bitmap`
0000222070070002
0000222070070002
0000022070070002
0000022077700002
0000002077000202
0000000000022200
0000000888880000
2222222222200020
2222222220000220
0000000000602220
6666666666002220
6666666660002200
6666660600002202
0660006000000002
0660066000000022
006666000000022.`],
)

setSolids([])

var level = 0
var levels = [
  map`
..COLACK..2024..
----------------
................
................
...SPRIG-EDIT...
......----......
.....V0[0[1.....
................
................
...PRESS.DOWN...
................
....TO.START....
................
................
..............()
..............*&`,                    // Title Screen
  map`
....CONTROLS....
----------------
................
AD.-.MOVE.CURSOR
................
JL.-.CHANGE.....
.....LETTER.....
................
W..-.NEW.LINE...
................
S..-.SPACE.START
................
I..-.PLACE......
................
K..-.DELETE.....
----------------`,                    // Controls
  map`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
CHARACTER.---.${currentCharacter}.`,                    // Text Editor
]

/*
  Set the current selected character for use in the text editor.
*/
function setCharacter() {
  switch (currentSelectedCharacter) {
    case 0:
      currentCharacter = TEXT_A;
      break;
    case 1:
      currentCharacter = TEXT_B;
      break;
    case 2:
      currentCharacter = TEXT_C;
      break;
    case 3:
      currentCharacter = TEXT_D;
      break;
    case 4:
      currentCharacter = TEXT_E;
      break;
    case 5:
      currentCharacter = TEXT_F;
      break;
    case 6:
      currentCharacter = TEXT_G;
      break;
    case 7:
      currentCharacter = TEXT_H;
      break;
    case 8:
      currentCharacter = TEXT_I;
      break;
    case 9:
      currentCharacter = TEXT_J;
      break;
    case 10:
      currentCharacter = TEXT_K;
      break;
    case 11:
      currentCharacter = TEXT_L;
      break;
    case 12:
      currentCharacter = TEXT_M;
      break;
    case 13:
      currentCharacter = TEXT_N;
      break;
    case 14:
      currentCharacter = TEXT_O;
      break;
    case 15:
      currentCharacter = TEXT_P;
      break;
    case 16:
      currentCharacter = TEXT_Q;
      break;
    case 17:
      currentCharacter = TEXT_R;
      break;
    case 18:
      currentCharacter = TEXT_S;
      break;
    case 19:
      currentCharacter = TEXT_T;
      break;
    case 20:
      currentCharacter = TEXT_U;
      break;
    case 21:
      currentCharacter = TEXT_V;
      break;
    case 22:
      currentCharacter = TEXT_W;
      break;
    case 23:
      currentCharacter = TEXT_X;
      break;
    case 24:
      currentCharacter = TEXT_Y;
      break;
    case 25:
      currentCharacter = TEXT_Z;
      break;
    case 26:
      currentCharacter = TEXT_EX;
      break;
    case 27:
      currentCharacter = TEXT_QU;
      break;
    case 28:
      currentCharacter = TEXT_PE;
      break;
    case 29:
      currentCharacter = TEXT_DA;
      break;
    case 30:
      currentCharacter = NUM_0;
      break;
    case 31:
      currentCharacter = NUM_1;
      break;
    case 32:
      currentCharacter = NUM_2;
      break;
    case 33:
      currentCharacter = NUM_3;
      break;
    case 34:
      currentCharacter = NUM_4;
      break;
    case 35:
      currentCharacter = NUM_5;
      break;
    case 36:
      currentCharacter = NUM_6;
      break;
    case 37:
      currentCharacter = NUM_7;
      break;
    case 38:
      currentCharacter = NUM_8;
      break;
    case 39:
      currentCharacter = NUM_9;
      break;
  }
}

var currentX = 0;
var currentY = 0;
var EDITOR_LEVEL =   map`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
CHARACTER.---.${currentCharacter}.`;

function updateEditor(editing, deleting) {
    if (editing) {
        var cursorIndex = currentY * (EDITOR_LEVEL.indexOf('\n') + 1) + currentX;

        var charToReplaceIndex = cursorIndex + EDITOR_LEVEL.substring(cursorIndex).indexOf('.');
        // Replace the character at the calculated index with the current character
        EDITOR_LEVEL = EDITOR_LEVEL.substring(0, charToReplaceIndex) + currentCharacter + EDITOR_LEVEL.substring(charToReplaceIndex + 1);
    } else {
        // Find the index of the line containing "CHARACTER.---."
        var lineIndex = EDITOR_LEVEL.indexOf("CHARACTER.---.");
        // Replace the currentCharacter in the line with the new currentCharacter
        EDITOR_LEVEL = EDITOR_LEVEL.substring(0, lineIndex + "CHARACTER.---.".length) + currentCharacter + EDITOR_LEVEL.substring(lineIndex + "CHARACTER.---.".length + 1);
    }

    if (deleting) {
        // Move the cursor back by one position
        var prevX = currentX - 1;
        var prevY = currentY;
        if (prevX < 0) {
            prevX = EDITOR_LEVEL.indexOf('\n', currentY * (EDITOR_LEVEL.indexOf('\n') + 1) - 1) - 1;
            prevY -= 1;
        }

        // Calculate the index of the previous character
        var prevCharIndex = prevY * (EDITOR_LEVEL.indexOf('\n') + 1) + prevX;

        // Replace the previous character with a blank
        if (prevCharIndex >= 0 && prevCharIndex < EDITOR_LEVEL.length) {
            EDITOR_LEVEL = EDITOR_LEVEL.substring(0, prevCharIndex) + '.' + EDITOR_LEVEL.substring(prevCharIndex + 1);
        }

        // Update the current cursor position after deletion
        currentX = prevX;
        currentY = prevY;
    }

    console.log(EDITOR_LEVEL);

    setMap(EDITOR_LEVEL);
}



/*
  Loaded at the beginning of the program to display specifically the version.
*/
function createTitleScreen() {
  LEVEL_TITLE = map`..COLACK..2024..
----------------
................
................
...SPRIG-EDIT...
......----......
.....V${VERSION_MAJOR}[${VERSION_MINOR}[${VERSION_PATCH}.....
................
................
...PRESS.DOWN...
................
....TO.START....
................
................
..............()
..............*&`;
  setMap(LEVEL_TITLE);
}

function titleBlink() {
  if (!isHidden) {
    isHidden = true;
    LEVEL_TITLE = map`..COLACK..2024..
----------------
................
................
...SPRIG-EDIT...
......----......
.....V${VERSION_MAJOR}[${VERSION_MINOR}[${VERSION_PATCH}.....
................
................
................
................
................
................
................
..............()
..............*&`;
  } else {
    isHidden = false;
    LEVEL_TITLE = map`..COLACK..2024..
----------------
................
................
...SPRIG-EDIT...
......----......
.....V${VERSION_MAJOR}[${VERSION_MINOR}[${VERSION_PATCH}.....
................
................
...PRESS.DOWN...
................
....TO.START....
................
................
..............()
..............*&`;
  }
  setMap(LEVEL_TITLE);
}

/*
  Executed when the game boots up
*/
function onGameStart() {
  setBackground(BACKGROUND_BLACK);
  
  createTitleScreen();

  newInterval = setInterval(titleBlink, 500);
}

setMap(levels[level])

onInput("i", () => {
  updateEditor(true);
});

onInput("k", () => {
  updateEditor(false, true);
});
      
onInput("j", () => {
  if (currentSelectedCharacter == 0) {
    currentSelectedCharacter = 39;
  } else {
    currentSelectedCharacter--;
  }
  updateEditor(false);
});

onInput("l", () => {
  if (currentSelectedCharacter == 39) {
    currentSelectedCharacter = 0;
  } else {
    currentSelectedCharacter++;
  }
  updateEditor(false);
});

onInput("s", () => {
  switch (level) {
    case 0:
      level = 1;
      setMap(levels[level]);
      clearInterval(newInterval);
      PLAYBACK_MAIN.end();
      playTune(SFX_start);

      PLAYBACK_CONTROLS = playTune(MUSIC_controls, Infinity);
      break;
    case 1:
      level = 2;
      setMap(levels[level]);
      PLAYBACK_CONTROLS.end();
      playTune(SFX_edit);

      PLAYBACK_EDITOR = playTune(MUSIC_main, Infinity);
      break;
    case 2:
      getFirst(player).x += 1;
      break;
  }
});

afterInput(() => {
  if (level == 2) {
    setCharacter();
  }
});

onGameStart();
